#include <std/mem.pat>
#include <std/string.pat>
#include <std/core.pat>
#pragma pattern_limit 999999;

struct Skip0 {
    padding[while(!std::mem::eof() && std::mem::read_unsigned($, 1) == 0x0)];
};

struct Skip01 {
    padding[while(std::mem::read_unsigned($, 1) == 0x0 || std::mem::read_unsigned($, 1) == 0x1)];
};


struct FloatBlock {
    float data[while(
        std::mem::read_unsigned($, 1) != 0x1 &&
        std::mem::read_unsigned($, 1) != 0xE)];
    padding[1];
};

struct Vector {
    float x;
    float y;
    float z;
};

struct Transform {
    Vector position;
    Vector rotation;
};

struct CameraElement {
    char name[];
    float nums[179];
    u8 const_0E;
    padding[24];

};

struct LightBlock {
    float nums[13];
    u32 skipped;
};

struct CityBlock {
    char name[];

    if (std::mem::read_unsigned($ + 3, 1) == 0xDC ||
        std::mem::read_unsigned($ + 3, 1) == 0xC8 ||
        std::mem::read_unsigned($ + 3, 1) == 0xCD ||
        std::mem::read_unsigned($ + 3, 1) == 0xE6) {
        // Water
        padding[3];
        u8 type;
        padding[3];
        float data[11];
        u32 num;
    } else if (
        std::mem::read_unsigned($, 1) == 0x40 &&
        std::mem::read_unsigned($ + 4, 1) == 0x40 ||
        std::mem::read_unsigned($, 1) == 0x80 &&
        std::mem::read_unsigned($ + 4, 1) == 0x80) {
        padding[8];
        u8 data[parent.size];
    } else {
        break;
    }
};

struct Name {
    char value[];
};

struct CityFooter {
    Name names[while(std::mem::read_unsigned($, 2) != 0x0)];
    padding[1];
    u8 nums[while(!std::mem::eof())];
};

struct SceneElement {
    Skip01;
    char name[];

    u32 type1;
    u32 type2;
    u8 type;

    if (type1 == 0x80 || type1 == 0x40) {
        u32 size = type1 * type2;
        padding[3];
        u8 height_data1[size];
        u32 magic;
        padding[1];
        u8 magic2;
        padding[2];
        u8 height_data2[size * 4];

        if (std::mem::read_unsigned($, 1) == 0x1) {
            Skip01;
            if (std::mem::read_unsigned($, 1) == 0x2) {
                u32 z;
            }
            u32 a;
            u32 b;
            u8 height_data3[size];
        }
        Skip0;
        if (std::mem::read_unsigned($, 1) == 0x1E) {
            u8 skip1E;
        }
        CityBlock city_blocks[while(true)];
        CityFooter footer;
    } else {

        if (type == 0x0) {
            padding[5];
            float nums[10];
        } else if (type == 0x2) {
            padding[4];
            Transform transform;
            padding[1];
            Transform transforms[10];
        } else if (type == 0x3) {
            padding[4];
            Transform transform;
            padding[1];
            Transform transforms[11];
        } else if (type == 0x4) {
            padding[19];
            char object_name[];
            Transform transform;
            padding[1];
            Transform transforms[10];
        } else if (type == 0x5) {
            padding[6];
            LightBlock blocks[8];
        } else if (type == 0x7) {
            padding[6];
            LightBlock blocks[8];
        } else if (type == 0x8) {
            padding[6];
            LightBlock blocks[8];
        }

        Skip0;
    }
};


struct ElementGroup {
    Skip01;
    SceneElement first_element;
    SceneElement elements[while(std::mem::read_unsigned($, 2) == 0x101)];
};


struct Ed3 {
    padding[4];
    CameraElement camera;
    ElementGroup groups[while(std::mem::read_unsigned($, 1) == 0x1)];
};


Ed3 ed3 @ $;

//ElementGroup city_group_tutorial1 @ 0x17A29;
//ElementGroup city_group_tutorial @ 0x14A18;
//ElementGroup city_group_hannover @ 0x6E464;
//ElementGroup city_group_nuernberg @ 0xD4720;
//ElementGroup city_group_koeln @ 0x6E951;
//ElementGroup city_group_augsburg @ 0x77186;
//ElementGroup city_group_berlin @ 0x61FFD;
//ElementGroup city_group_dresden @ 0x7BBCE;
//ElementGroup city_group_master @ 0x155A0;
//ElementGroup city_group_master_64 @ 0x1600A;
//ElementGroup city_group_tutorial_map_einstellung @ 0x14A18;
